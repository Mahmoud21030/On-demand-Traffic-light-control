
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000a36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000125a  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087c  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab6  00000000  00000000  000026a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00003158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000638  00000000  00000000  0000393b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003f73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_1>
   8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 02 	call	0x436	; 0x436 <main>
  8a:	0c 94 df 04 	jmp	0x9be	; 0x9be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INT_mode>:
	}
}

void INT_mode(void)
{
	if (returned_interrupt == 0) // ignore interrupt signal if the previous ISR didn't end yet
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	81 11       	cpse	r24, r1
  98:	33 c0       	rjmp	.+102    	; 0x100 <INT_mode+0x6e>
	{
		switch(NEXT_STATE)
  9a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <NEXT_STATE>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 f0       	breq	.+36     	; 0xc6 <INT_mode+0x34>
  a2:	28 f0       	brcs	.+10     	; 0xae <INT_mode+0x1c>
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	c9 f0       	breq	.+50     	; 0xda <INT_mode+0x48>
  a8:	85 30       	cpi	r24, 0x05	; 5
  aa:	f9 f0       	breq	.+62     	; 0xea <INT_mode+0x58>
  ac:	08 95       	ret
		{
			case CAR_GREEN:
			PED_LED_RED(on);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 83 01 	call	0x306	; 0x306 <DIO_write>
			NEXT_STATE = COMMON_YELLOW;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <NEXT_STATE>
			returned_interrupt = 1;
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
  c4:	08 95       	ret
			
			case COMMON_YELLOW:
			CAR_LED_YELLOW(off); //helps for sync of both yellows
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	8b e3       	ldi	r24, 0x3B	; 59
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 83 01 	call	0x306	; 0x306 <DIO_write>
			returned_interrupt = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
  d8:	08 95       	ret
			
			case CAR_RED:
			NEXT_STATE = PED_GREEN;
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <NEXT_STATE>
			stop_timer();//it'll reset the timer for giving the pedestrian more time to cross
  e0:	13 be       	out	0x33, r1	; 51
			returned_interrupt = 1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
  e8:	08 95       	ret
			
			case PED_RED:
			PED_LED_RED(on);
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	88 e3       	ldi	r24, 0x38	; 56
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 83 01 	call	0x306	; 0x306 <DIO_write>
			NEXT_STATE = COMMON_YELLOW;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <NEXT_STATE>
			returned_interrupt = 1;
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 100:	08 95       	ret

00000102 <__vector_1>:
	Traffic_button_init();
	LEDS_init();
}

ISR(EXT_INT_0)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	INT_mode();
 124:	0e 94 49 00 	call	0x92	; 0x92 <INT_mode>
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <delay_ms>:
*
* delaytime The time you want to delay in milliseconds.
* FCPU The clock frequency of the microcontroller.
*/
void delay_ms( float delaytime, float FCPU) /* minimum 1 msec (in Proteus 2 msec minimum )*/
{
 14a:	4f 92       	push	r4
 14c:	5f 92       	push	r5
 14e:	6f 92       	push	r6
 150:	7f 92       	push	r7
 152:	8f 92       	push	r8
 154:	9f 92       	push	r9
 156:	af 92       	push	r10
 158:	bf 92       	push	r11
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 d0       	rcall	.+0      	; 0x168 <delay_ms+0x1e>
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	6b 01       	movw	r12, r22
 16e:	7c 01       	movw	r14, r24
 170:	ca 01       	movw	r24, r20
 172:	b9 01       	movw	r22, r18
	float Ttick = (1024.0 / (FCPU * 1000)); // tick in misec
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	4a e7       	ldi	r20, 0x7A	; 122
 17a:	54 e4       	ldi	r21, 0x44	; 68
 17c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__mulsf3>
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	94 e4       	ldi	r25, 0x44	; 68
 18c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divsf3>
 190:	2b 01       	movw	r4, r22
 192:	3c 01       	movw	r6, r24
	float Tmax = 256 * Ttick;
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	40 e8       	ldi	r20, 0x80	; 128
 19a:	53 e4       	ldi	r21, 0x43	; 67
 19c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__mulsf3>
 1a0:	4b 01       	movw	r8, r22
 1a2:	5c 01       	movw	r10, r24
	uint8_t Tinit = 0;
	

	if (delaytime <= Tmax && delaytime >1) // if the delay < 262 msec
 1a4:	a7 01       	movw	r20, r14
 1a6:	96 01       	movw	r18, r12
 1a8:	0e 94 6d 04 	call	0x8da	; 0x8da <__gesf2>
 1ac:	88 23       	and	r24, r24
 1ae:	24 f1       	brlt	.+72     	; 0x1f8 <delay_ms+0xae>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e8       	ldi	r20, 0x80	; 128
 1b6:	5f e3       	ldi	r21, 0x3F	; 63
 1b8:	c7 01       	movw	r24, r14
 1ba:	b6 01       	movw	r22, r12
 1bc:	0e 94 6d 04 	call	0x8da	; 0x8da <__gesf2>
 1c0:	18 16       	cp	r1, r24
 1c2:	d4 f4       	brge	.+52     	; 0x1f8 <delay_ms+0xae>
	{
		Tinit = ((Tmax - delaytime) / Ttick);
 1c4:	a7 01       	movw	r20, r14
 1c6:	96 01       	movw	r18, r12
 1c8:	c5 01       	movw	r24, r10
 1ca:	b4 01       	movw	r22, r8
 1cc:	0e 94 49 02 	call	0x492	; 0x492 <__subsf3>
 1d0:	a3 01       	movw	r20, r6
 1d2:	92 01       	movw	r18, r4
 1d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divsf3>
 1d8:	0e 94 4b 03 	call	0x696	; 0x696 <__fixunssfsi>
		TCNT0 = (uint8_t)Tinit;
 1dc:	62 bf       	out	0x32, r22	; 50
		TCCR0 = 0x05; // normal mode and 1024 prescaler
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	83 bf       	out	0x33, r24	; 51
		while ((read_bit(TIFR, 0) == 0) && TCCR0 != 0x00);
 1e2:	08 b6       	in	r0, 0x38	; 56
 1e4:	00 fc       	sbrc	r0, 0
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <delay_ms+0xa4>
 1e8:	83 b7       	in	r24, 0x33	; 51
 1ea:	81 11       	cpse	r24, r1
 1ec:	fa cf       	rjmp	.-12     	; 0x1e2 <delay_ms+0x98>
		TCCR0 = 0x00;
 1ee:	13 be       	out	0x33, r1	; 51
		set_bit(TIFR, 0); // clearing the overflow flag
 1f0:	88 b7       	in	r24, 0x38	; 56
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	88 bf       	out	0x38, r24	; 56
 1f6:	57 c0       	rjmp	.+174    	; 0x2a6 <delay_ms+0x15c>
	}
	
	else if (delaytime == 1); //due to syntax time already 1 msec is passed
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e8       	ldi	r20, 0x80	; 128
 1fe:	5f e3       	ldi	r21, 0x3F	; 63
 200:	c7 01       	movw	r24, r14
 202:	b6 01       	movw	r22, r12
 204:	0e 94 cd 02 	call	0x59a	; 0x59a <__cmpsf2>
 208:	88 23       	and	r24, r24
 20a:	09 f4       	brne	.+2      	; 0x20e <delay_ms+0xc4>
 20c:	4c c0       	rjmp	.+152    	; 0x2a6 <delay_ms+0x15c>
	
	else if(delaytime > Tmax)
 20e:	a7 01       	movw	r20, r14
 210:	96 01       	movw	r18, r12
 212:	c5 01       	movw	r24, r10
 214:	b4 01       	movw	r22, r8
 216:	0e 94 cd 02 	call	0x59a	; 0x59a <__cmpsf2>
 21a:	88 23       	and	r24, r24
 21c:	0c f0       	brlt	.+2      	; 0x220 <delay_ms+0xd6>
 21e:	43 c0       	rjmp	.+134    	; 0x2a6 <delay_ms+0x15c>
	{
		volatile int N = ceil(delaytime / Tmax);
 220:	a5 01       	movw	r20, r10
 222:	94 01       	movw	r18, r8
 224:	c7 01       	movw	r24, r14
 226:	b6 01       	movw	r22, r12
 228:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divsf3>
 22c:	0e 94 b6 02 	call	0x56c	; 0x56c <ceil>
 230:	0e 94 44 03 	call	0x688	; 0x688 <__fixsfsi>
 234:	7a 83       	std	Y+2, r23	; 0x02
 236:	69 83       	std	Y+1, r22	; 0x01
		Tinit = 256.0 - ((float)delaytime / Ttick) / N ; 
 238:	a3 01       	movw	r20, r6
 23a:	92 01       	movw	r18, r4
 23c:	c7 01       	movw	r24, r14
 23e:	b6 01       	movw	r22, r12
 240:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divsf3>
 244:	6b 01       	movw	r12, r22
 246:	7c 01       	movw	r14, r24
 248:	69 81       	ldd	r22, Y+1	; 0x01
 24a:	7a 81       	ldd	r23, Y+2	; 0x02
 24c:	07 2e       	mov	r0, r23
 24e:	00 0c       	add	r0, r0
 250:	88 0b       	sbc	r24, r24
 252:	99 0b       	sbc	r25, r25
 254:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__floatsisf>
 258:	9b 01       	movw	r18, r22
 25a:	ac 01       	movw	r20, r24
 25c:	c7 01       	movw	r24, r14
 25e:	b6 01       	movw	r22, r12
 260:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divsf3>
 264:	9b 01       	movw	r18, r22
 266:	ac 01       	movw	r20, r24
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e8       	ldi	r24, 0x80	; 128
 26e:	93 e4       	ldi	r25, 0x43	; 67
 270:	0e 94 49 02 	call	0x492	; 0x492 <__subsf3>
 274:	0e 94 4b 03 	call	0x696	; 0x696 <__fixunssfsi>
		TCCR0 = 0x05;        // normal mode and 1024 prescaler
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	83 bf       	out	0x33, r24	; 51
		for (int i = 0; i < N; i++)
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	0c c0       	rjmp	.+24     	; 0x29a <delay_ms+0x150>
		{
			TCNT0 = Tinit;
 282:	62 bf       	out	0x32, r22	; 50
			while ((read_bit(TIFR, 0) == 0) && TCCR0 != 0x00);
 284:	08 b6       	in	r0, 0x38	; 56
 286:	00 fc       	sbrc	r0, 0
 288:	03 c0       	rjmp	.+6      	; 0x290 <delay_ms+0x146>
 28a:	83 b7       	in	r24, 0x33	; 51
 28c:	81 11       	cpse	r24, r1
 28e:	fa cf       	rjmp	.-12     	; 0x284 <delay_ms+0x13a>
			set_bit(TIFR, 0);// clearing the overflow flag
 290:	88 b7       	in	r24, 0x38	; 56
 292:	81 60       	ori	r24, 0x01	; 1
 294:	88 bf       	out	0x38, r24	; 56
	else if(delaytime > Tmax)
	{
		volatile int N = ceil(delaytime / Tmax);
		Tinit = 256.0 - ((float)delaytime / Ttick) / N ; 
		TCCR0 = 0x05;        // normal mode and 1024 prescaler
		for (int i = 0; i < N; i++)
 296:	2f 5f       	subi	r18, 0xFF	; 255
 298:	3f 4f       	sbci	r19, 0xFF	; 255
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	9a 81       	ldd	r25, Y+2	; 0x02
 29e:	28 17       	cp	r18, r24
 2a0:	39 07       	cpc	r19, r25
 2a2:	7c f3       	brlt	.-34     	; 0x282 <delay_ms+0x138>
		{
			TCNT0 = Tinit;
			while ((read_bit(TIFR, 0) == 0) && TCCR0 != 0x00);
			set_bit(TIFR, 0);// clearing the overflow flag
		}
		TCCR0 = 0x00;
 2a4:	13 be       	out	0x33, r1	; 51
	}
	
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	ff 90       	pop	r15
 2b0:	ef 90       	pop	r14
 2b2:	df 90       	pop	r13
 2b4:	cf 90       	pop	r12
 2b6:	bf 90       	pop	r11
 2b8:	af 90       	pop	r10
 2ba:	9f 90       	pop	r9
 2bc:	8f 90       	pop	r8
 2be:	7f 90       	pop	r7
 2c0:	6f 90       	pop	r6
 2c2:	5f 90       	pop	r5
 2c4:	4f 90       	pop	r4
 2c6:	08 95       	ret

000002c8 <Dio_init>:
*  dirc 1 for output, 0 for input
*/
void Dio_init(volatile uint8_t *PORT, uint8_t pin_number, uint8_t dirc)
{
	// DDRx = PORTx - 1
	if (dirc == output)
 2c8:	41 30       	cpi	r20, 0x01	; 1
 2ca:	69 f4       	brne	.+26     	; 0x2e6 <Dio_init+0x1e>
	{
		set_bit(*(PORT-1), pin_number);
 2cc:	e8 2f       	mov	r30, r24
 2ce:	f9 2f       	mov	r31, r25
 2d0:	22 91       	ld	r18, -Z
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <Dio_init+0x14>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <Dio_init+0x10>
 2e0:	82 2b       	or	r24, r18
 2e2:	80 83       	st	Z, r24
 2e4:	08 95       	ret
	}
	else if (dirc == input)
 2e6:	41 11       	cpse	r20, r1
 2e8:	0d c0       	rjmp	.+26     	; 0x304 <Dio_init+0x3c>
	{
		clear_bit(*(PORT-1), pin_number);
 2ea:	e8 2f       	mov	r30, r24
 2ec:	f9 2f       	mov	r31, r25
 2ee:	22 91       	ld	r18, -Z
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <Dio_init+0x32>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <Dio_init+0x2e>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	80 83       	st	Z, r24
 304:	08 95       	ret

00000306 <DIO_write>:
* pin_number The pin number you want to write to.
* data 1 or 0
*/
void DIO_write(volatile uint8_t *PORT, uint8_t pin_number, uint8_t data)
{
	if (data == 1)
 306:	41 30       	cpi	r20, 0x01	; 1
 308:	61 f4       	brne	.+24     	; 0x322 <DIO_write+0x1c>
	{
		set_bit(*PORT, pin_number);
 30a:	fc 01       	movw	r30, r24
 30c:	40 81       	ld	r20, Z
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_write+0x12>
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_write+0xe>
 31c:	24 2b       	or	r18, r20
 31e:	20 83       	st	Z, r18
 320:	08 95       	ret
	}
	else if (data == 0)
 322:	41 11       	cpse	r20, r1
 324:	0c c0       	rjmp	.+24     	; 0x33e <DIO_write+0x38>
	{
		clear_bit(*PORT, pin_number);
 326:	fc 01       	movw	r30, r24
 328:	40 81       	ld	r20, Z
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_write+0x2e>
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_write+0x2a>
 338:	20 95       	com	r18
 33a:	24 23       	and	r18, r20
 33c:	20 83       	st	Z, r18
 33e:	08 95       	ret

00000340 <interrupt_reg>:
 * controlling the sense
 */
void interrupt_reg(uint8_t INTx, uint8_t sense)
{
	
    sei(); // 1.enable global interrupt
 340:	78 94       	sei

    switch (INTx)
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	61 f1       	breq	.+88     	; 0x39e <interrupt_reg+0x5e>
 346:	20 f0       	brcs	.+8      	; 0x350 <interrupt_reg+0x10>
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	09 f4       	brne	.+2      	; 0x34e <interrupt_reg+0xe>
 34c:	4f c0       	rjmp	.+158    	; 0x3ec <interrupt_reg+0xac>
 34e:	08 95       	ret
    {
    case INT0_num:
        switch (sense) // 2.choose how to sense
 350:	61 30       	cpi	r22, 0x01	; 1
 352:	69 f0       	breq	.+26     	; 0x36e <interrupt_reg+0x2e>
 354:	28 f0       	brcs	.+10     	; 0x360 <interrupt_reg+0x20>
 356:	62 30       	cpi	r22, 0x02	; 2
 358:	89 f0       	breq	.+34     	; 0x37c <interrupt_reg+0x3c>
 35a:	63 30       	cpi	r22, 0x03	; 3
 35c:	b1 f0       	breq	.+44     	; 0x38a <interrupt_reg+0x4a>
 35e:	1b c0       	rjmp	.+54     	; 0x396 <interrupt_reg+0x56>
        {
        case lowlevel:
            clear_bit(MCUCR, 0);
 360:	85 b7       	in	r24, 0x35	; 53
 362:	8e 7f       	andi	r24, 0xFE	; 254
 364:	85 bf       	out	0x35, r24	; 53
            clear_bit(MCUCR, 1);
 366:	85 b7       	in	r24, 0x35	; 53
 368:	8d 7f       	andi	r24, 0xFD	; 253
 36a:	85 bf       	out	0x35, r24	; 53
            break;
 36c:	14 c0       	rjmp	.+40     	; 0x396 <interrupt_reg+0x56>
        case anychange:
            set_bit(MCUCR, 0);
 36e:	85 b7       	in	r24, 0x35	; 53
 370:	81 60       	ori	r24, 0x01	; 1
 372:	85 bf       	out	0x35, r24	; 53
            clear_bit(MCUCR, 1);
 374:	85 b7       	in	r24, 0x35	; 53
 376:	8d 7f       	andi	r24, 0xFD	; 253
 378:	85 bf       	out	0x35, r24	; 53
            break;
 37a:	0d c0       	rjmp	.+26     	; 0x396 <interrupt_reg+0x56>
        case falling:
            clear_bit(MCUCR, 0);
 37c:	85 b7       	in	r24, 0x35	; 53
 37e:	8e 7f       	andi	r24, 0xFE	; 254
 380:	85 bf       	out	0x35, r24	; 53
            set_bit(MCUCR, 1);
 382:	85 b7       	in	r24, 0x35	; 53
 384:	82 60       	ori	r24, 0x02	; 2
 386:	85 bf       	out	0x35, r24	; 53
            break;
 388:	06 c0       	rjmp	.+12     	; 0x396 <interrupt_reg+0x56>
        case rising:
            set_bit(MCUCR, 0);
 38a:	85 b7       	in	r24, 0x35	; 53
 38c:	81 60       	ori	r24, 0x01	; 1
 38e:	85 bf       	out	0x35, r24	; 53
            set_bit(MCUCR, 1);
 390:	85 b7       	in	r24, 0x35	; 53
 392:	82 60       	ori	r24, 0x02	; 2
 394:	85 bf       	out	0x35, r24	; 53
            break;
        }

        set_bit(GICR, 6); // 3.Choose interrupt Port
 396:	8b b7       	in	r24, 0x3b	; 59
 398:	80 64       	ori	r24, 0x40	; 64
 39a:	8b bf       	out	0x3b, r24	; 59
        break;
 39c:	08 95       	ret

    case INT1_num:
        switch (sense) // 2.choose how to sense
 39e:	61 30       	cpi	r22, 0x01	; 1
 3a0:	69 f0       	breq	.+26     	; 0x3bc <interrupt_reg+0x7c>
 3a2:	28 f0       	brcs	.+10     	; 0x3ae <interrupt_reg+0x6e>
 3a4:	62 30       	cpi	r22, 0x02	; 2
 3a6:	89 f0       	breq	.+34     	; 0x3ca <interrupt_reg+0x8a>
 3a8:	63 30       	cpi	r22, 0x03	; 3
 3aa:	b1 f0       	breq	.+44     	; 0x3d8 <interrupt_reg+0x98>
 3ac:	1b c0       	rjmp	.+54     	; 0x3e4 <interrupt_reg+0xa4>
        {
        case lowlevel:
            clear_bit(MCUCR, 2);
 3ae:	85 b7       	in	r24, 0x35	; 53
 3b0:	8b 7f       	andi	r24, 0xFB	; 251
 3b2:	85 bf       	out	0x35, r24	; 53
            clear_bit(MCUCR, 3);
 3b4:	85 b7       	in	r24, 0x35	; 53
 3b6:	87 7f       	andi	r24, 0xF7	; 247
 3b8:	85 bf       	out	0x35, r24	; 53
            break;
 3ba:	14 c0       	rjmp	.+40     	; 0x3e4 <interrupt_reg+0xa4>
        case anychange:
            set_bit(MCUCR, 2);
 3bc:	85 b7       	in	r24, 0x35	; 53
 3be:	84 60       	ori	r24, 0x04	; 4
 3c0:	85 bf       	out	0x35, r24	; 53
            clear_bit(MCUCR, 3);
 3c2:	85 b7       	in	r24, 0x35	; 53
 3c4:	87 7f       	andi	r24, 0xF7	; 247
 3c6:	85 bf       	out	0x35, r24	; 53
            break;
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <interrupt_reg+0xa4>
        case falling:
            clear_bit(MCUCR, 2);
 3ca:	85 b7       	in	r24, 0x35	; 53
 3cc:	8b 7f       	andi	r24, 0xFB	; 251
 3ce:	85 bf       	out	0x35, r24	; 53
            set_bit(MCUCR, 3);
 3d0:	85 b7       	in	r24, 0x35	; 53
 3d2:	88 60       	ori	r24, 0x08	; 8
 3d4:	85 bf       	out	0x35, r24	; 53
            break;
 3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <interrupt_reg+0xa4>
        case rising:
            set_bit(MCUCR, 2);
 3d8:	85 b7       	in	r24, 0x35	; 53
 3da:	84 60       	ori	r24, 0x04	; 4
 3dc:	85 bf       	out	0x35, r24	; 53
            set_bit(MCUCR, 3);
 3de:	85 b7       	in	r24, 0x35	; 53
 3e0:	88 60       	ori	r24, 0x08	; 8
 3e2:	85 bf       	out	0x35, r24	; 53
            break;
        }
        set_bit(GICR, 7); // 3.Choose interrupt Port
 3e4:	8b b7       	in	r24, 0x3b	; 59
 3e6:	80 68       	ori	r24, 0x80	; 128
 3e8:	8b bf       	out	0x3b, r24	; 59
        break;
 3ea:	08 95       	ret

    case INT2_num:
        switch (sense) // 2.choose how to sense
 3ec:	62 30       	cpi	r22, 0x02	; 2
 3ee:	19 f0       	breq	.+6      	; 0x3f6 <interrupt_reg+0xb6>
 3f0:	63 30       	cpi	r22, 0x03	; 3
 3f2:	29 f0       	breq	.+10     	; 0x3fe <interrupt_reg+0xbe>
 3f4:	07 c0       	rjmp	.+14     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
        {

        case falling:
            clear_bit(MCUCSR, 1);
 3f6:	84 b7       	in	r24, 0x34	; 52
 3f8:	8d 7f       	andi	r24, 0xFD	; 253
 3fa:	84 bf       	out	0x34, r24	; 52
            break;
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
        case rising:
            set_bit(MCUCSR, 1);
 3fe:	84 b7       	in	r24, 0x34	; 52
 400:	82 60       	ori	r24, 0x02	; 2
 402:	84 bf       	out	0x34, r24	; 52
            break;
        }
        set_bit(GICR, 5); // 3.Choose interrupt Port
 404:	8b b7       	in	r24, 0x3b	; 59
 406:	80 62       	ori	r24, 0x20	; 32
 408:	8b bf       	out	0x3b, r24	; 59
 40a:	08 95       	ret

0000040c <int_test>:
}

void int_test(void)
{
	/*interrupt driver test*/
	Dio_init(&PORTD,PIN3,input);
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	63 e0       	ldi	r22, 0x03	; 3
 410:	82 e3       	ldi	r24, 0x32	; 50
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Dio_init>
	interrupt_reg(INT1_num,rising);
 418:	63 e0       	ldi	r22, 0x03	; 3
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 a0 01 	call	0x340	; 0x340 <interrupt_reg>
	/* testing button and led*/
	while(1)
	delay_ms(20,1);
 420:	20 e0       	ldi	r18, 0x00	; 0
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	40 e8       	ldi	r20, 0x80	; 128
 426:	5f e3       	ldi	r21, 0x3F	; 63
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	80 ea       	ldi	r24, 0xA0	; 160
 42e:	91 e4       	ldi	r25, 0x41	; 65
 430:	0e 94 a5 00 	call	0x14a	; 0x14a <delay_ms>
 434:	f5 cf       	rjmp	.-22     	; 0x420 <int_test+0x14>

00000436 <main>:

void main()
{
	//DIOtest();
	//delaytest();
	int_test();
 436:	0e 94 06 02 	call	0x40c	; 0x40c <int_test>

0000043a <__vector_2>:
	delay_ms(20,1);
	
}

ISR(EXT_INT_1)
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
	delay_ms(20,1);
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	40 e8       	ldi	r20, 0x80	; 128
 462:	5f e3       	ldi	r21, 0x3F	; 63
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	80 ea       	ldi	r24, 0xA0	; 160
 46a:	91 e4       	ldi	r25, 0x41	; 65
 46c:	0e 94 a5 00 	call	0x14a	; 0x14a <delay_ms>
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__subsf3>:
 492:	50 58       	subi	r21, 0x80	; 128

00000494 <__addsf3>:
 494:	bb 27       	eor	r27, r27
 496:	aa 27       	eor	r26, r26
 498:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__addsf3x>
 49c:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_round>
 4a0:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscA>
 4a4:	38 f0       	brcs	.+14     	; 0x4b4 <__addsf3+0x20>
 4a6:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscB>
 4aa:	20 f0       	brcs	.+8      	; 0x4b4 <__addsf3+0x20>
 4ac:	39 f4       	brne	.+14     	; 0x4bc <__addsf3+0x28>
 4ae:	9f 3f       	cpi	r25, 0xFF	; 255
 4b0:	19 f4       	brne	.+6      	; 0x4b8 <__addsf3+0x24>
 4b2:	26 f4       	brtc	.+8      	; 0x4bc <__addsf3+0x28>
 4b4:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_nan>
 4b8:	0e f4       	brtc	.+2      	; 0x4bc <__addsf3+0x28>
 4ba:	e0 95       	com	r30
 4bc:	e7 fb       	bst	r30, 7
 4be:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_inf>

000004c2 <__addsf3x>:
 4c2:	e9 2f       	mov	r30, r25
 4c4:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_split3>
 4c8:	58 f3       	brcs	.-42     	; 0x4a0 <__addsf3+0xc>
 4ca:	ba 17       	cp	r27, r26
 4cc:	62 07       	cpc	r22, r18
 4ce:	73 07       	cpc	r23, r19
 4d0:	84 07       	cpc	r24, r20
 4d2:	95 07       	cpc	r25, r21
 4d4:	20 f0       	brcs	.+8      	; 0x4de <__addsf3x+0x1c>
 4d6:	79 f4       	brne	.+30     	; 0x4f6 <__addsf3x+0x34>
 4d8:	a6 f5       	brtc	.+104    	; 0x542 <__addsf3x+0x80>
 4da:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_zero>
 4de:	0e f4       	brtc	.+2      	; 0x4e2 <__addsf3x+0x20>
 4e0:	e0 95       	com	r30
 4e2:	0b 2e       	mov	r0, r27
 4e4:	ba 2f       	mov	r27, r26
 4e6:	a0 2d       	mov	r26, r0
 4e8:	0b 01       	movw	r0, r22
 4ea:	b9 01       	movw	r22, r18
 4ec:	90 01       	movw	r18, r0
 4ee:	0c 01       	movw	r0, r24
 4f0:	ca 01       	movw	r24, r20
 4f2:	a0 01       	movw	r20, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	ff 27       	eor	r31, r31
 4f8:	59 1b       	sub	r21, r25
 4fa:	99 f0       	breq	.+38     	; 0x522 <__addsf3x+0x60>
 4fc:	59 3f       	cpi	r21, 0xF9	; 249
 4fe:	50 f4       	brcc	.+20     	; 0x514 <__addsf3x+0x52>
 500:	50 3e       	cpi	r21, 0xE0	; 224
 502:	68 f1       	brcs	.+90     	; 0x55e <__addsf3x+0x9c>
 504:	1a 16       	cp	r1, r26
 506:	f0 40       	sbci	r31, 0x00	; 0
 508:	a2 2f       	mov	r26, r18
 50a:	23 2f       	mov	r18, r19
 50c:	34 2f       	mov	r19, r20
 50e:	44 27       	eor	r20, r20
 510:	58 5f       	subi	r21, 0xF8	; 248
 512:	f3 cf       	rjmp	.-26     	; 0x4fa <__addsf3x+0x38>
 514:	46 95       	lsr	r20
 516:	37 95       	ror	r19
 518:	27 95       	ror	r18
 51a:	a7 95       	ror	r26
 51c:	f0 40       	sbci	r31, 0x00	; 0
 51e:	53 95       	inc	r21
 520:	c9 f7       	brne	.-14     	; 0x514 <__addsf3x+0x52>
 522:	7e f4       	brtc	.+30     	; 0x542 <__addsf3x+0x80>
 524:	1f 16       	cp	r1, r31
 526:	ba 0b       	sbc	r27, r26
 528:	62 0b       	sbc	r22, r18
 52a:	73 0b       	sbc	r23, r19
 52c:	84 0b       	sbc	r24, r20
 52e:	ba f0       	brmi	.+46     	; 0x55e <__addsf3x+0x9c>
 530:	91 50       	subi	r25, 0x01	; 1
 532:	a1 f0       	breq	.+40     	; 0x55c <__addsf3x+0x9a>
 534:	ff 0f       	add	r31, r31
 536:	bb 1f       	adc	r27, r27
 538:	66 1f       	adc	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	88 1f       	adc	r24, r24
 53e:	c2 f7       	brpl	.-16     	; 0x530 <__addsf3x+0x6e>
 540:	0e c0       	rjmp	.+28     	; 0x55e <__addsf3x+0x9c>
 542:	ba 0f       	add	r27, r26
 544:	62 1f       	adc	r22, r18
 546:	73 1f       	adc	r23, r19
 548:	84 1f       	adc	r24, r20
 54a:	48 f4       	brcc	.+18     	; 0x55e <__addsf3x+0x9c>
 54c:	87 95       	ror	r24
 54e:	77 95       	ror	r23
 550:	67 95       	ror	r22
 552:	b7 95       	ror	r27
 554:	f7 95       	ror	r31
 556:	9e 3f       	cpi	r25, 0xFE	; 254
 558:	08 f0       	brcs	.+2      	; 0x55c <__addsf3x+0x9a>
 55a:	b0 cf       	rjmp	.-160    	; 0x4bc <__addsf3+0x28>
 55c:	93 95       	inc	r25
 55e:	88 0f       	add	r24, r24
 560:	08 f0       	brcs	.+2      	; 0x564 <__addsf3x+0xa2>
 562:	99 27       	eor	r25, r25
 564:	ee 0f       	add	r30, r30
 566:	97 95       	ror	r25
 568:	87 95       	ror	r24
 56a:	08 95       	ret

0000056c <ceil>:
 56c:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_trunc>
 570:	90 f0       	brcs	.+36     	; 0x596 <ceil+0x2a>
 572:	9f 37       	cpi	r25, 0x7F	; 127
 574:	48 f4       	brcc	.+18     	; 0x588 <ceil+0x1c>
 576:	91 11       	cpse	r25, r1
 578:	16 f4       	brtc	.+4      	; 0x57e <ceil+0x12>
 57a:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_szero>
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	80 e8       	ldi	r24, 0x80	; 128
 584:	9f e3       	ldi	r25, 0x3F	; 63
 586:	08 95       	ret
 588:	26 f0       	brts	.+8      	; 0x592 <ceil+0x26>
 58a:	1b 16       	cp	r1, r27
 58c:	61 1d       	adc	r22, r1
 58e:	71 1d       	adc	r23, r1
 590:	81 1d       	adc	r24, r1
 592:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_mintl>
 596:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_mpack>

0000059a <__cmpsf2>:
 59a:	0e 94 b7 03 	call	0x76e	; 0x76e <__fp_cmp>
 59e:	08 f4       	brcc	.+2      	; 0x5a2 <__cmpsf2+0x8>
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	08 95       	ret

000005a4 <__divsf3>:
 5a4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divsf3x>
 5a8:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_round>
 5ac:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscB>
 5b0:	58 f0       	brcs	.+22     	; 0x5c8 <__divsf3+0x24>
 5b2:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscA>
 5b6:	40 f0       	brcs	.+16     	; 0x5c8 <__divsf3+0x24>
 5b8:	29 f4       	brne	.+10     	; 0x5c4 <__divsf3+0x20>
 5ba:	5f 3f       	cpi	r21, 0xFF	; 255
 5bc:	29 f0       	breq	.+10     	; 0x5c8 <__divsf3+0x24>
 5be:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_inf>
 5c2:	51 11       	cpse	r21, r1
 5c4:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_szero>
 5c8:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_nan>

000005cc <__divsf3x>:
 5cc:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_split3>
 5d0:	68 f3       	brcs	.-38     	; 0x5ac <__divsf3+0x8>

000005d2 <__divsf3_pse>:
 5d2:	99 23       	and	r25, r25
 5d4:	b1 f3       	breq	.-20     	; 0x5c2 <__divsf3+0x1e>
 5d6:	55 23       	and	r21, r21
 5d8:	91 f3       	breq	.-28     	; 0x5be <__divsf3+0x1a>
 5da:	95 1b       	sub	r25, r21
 5dc:	55 0b       	sbc	r21, r21
 5de:	bb 27       	eor	r27, r27
 5e0:	aa 27       	eor	r26, r26
 5e2:	62 17       	cp	r22, r18
 5e4:	73 07       	cpc	r23, r19
 5e6:	84 07       	cpc	r24, r20
 5e8:	38 f0       	brcs	.+14     	; 0x5f8 <__divsf3_pse+0x26>
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	22 0f       	add	r18, r18
 5f0:	33 1f       	adc	r19, r19
 5f2:	44 1f       	adc	r20, r20
 5f4:	aa 1f       	adc	r26, r26
 5f6:	a9 f3       	breq	.-22     	; 0x5e2 <__divsf3_pse+0x10>
 5f8:	35 d0       	rcall	.+106    	; 0x664 <__divsf3_pse+0x92>
 5fa:	0e 2e       	mov	r0, r30
 5fc:	3a f0       	brmi	.+14     	; 0x60c <__divsf3_pse+0x3a>
 5fe:	e0 e8       	ldi	r30, 0x80	; 128
 600:	32 d0       	rcall	.+100    	; 0x666 <__divsf3_pse+0x94>
 602:	91 50       	subi	r25, 0x01	; 1
 604:	50 40       	sbci	r21, 0x00	; 0
 606:	e6 95       	lsr	r30
 608:	00 1c       	adc	r0, r0
 60a:	ca f7       	brpl	.-14     	; 0x5fe <__divsf3_pse+0x2c>
 60c:	2b d0       	rcall	.+86     	; 0x664 <__divsf3_pse+0x92>
 60e:	fe 2f       	mov	r31, r30
 610:	29 d0       	rcall	.+82     	; 0x664 <__divsf3_pse+0x92>
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	88 1f       	adc	r24, r24
 618:	bb 1f       	adc	r27, r27
 61a:	26 17       	cp	r18, r22
 61c:	37 07       	cpc	r19, r23
 61e:	48 07       	cpc	r20, r24
 620:	ab 07       	cpc	r26, r27
 622:	b0 e8       	ldi	r27, 0x80	; 128
 624:	09 f0       	breq	.+2      	; 0x628 <__divsf3_pse+0x56>
 626:	bb 0b       	sbc	r27, r27
 628:	80 2d       	mov	r24, r0
 62a:	bf 01       	movw	r22, r30
 62c:	ff 27       	eor	r31, r31
 62e:	93 58       	subi	r25, 0x83	; 131
 630:	5f 4f       	sbci	r21, 0xFF	; 255
 632:	3a f0       	brmi	.+14     	; 0x642 <__divsf3_pse+0x70>
 634:	9e 3f       	cpi	r25, 0xFE	; 254
 636:	51 05       	cpc	r21, r1
 638:	78 f0       	brcs	.+30     	; 0x658 <__divsf3_pse+0x86>
 63a:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_inf>
 63e:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_szero>
 642:	5f 3f       	cpi	r21, 0xFF	; 255
 644:	e4 f3       	brlt	.-8      	; 0x63e <__divsf3_pse+0x6c>
 646:	98 3e       	cpi	r25, 0xE8	; 232
 648:	d4 f3       	brlt	.-12     	; 0x63e <__divsf3_pse+0x6c>
 64a:	86 95       	lsr	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f7 95       	ror	r31
 654:	9f 5f       	subi	r25, 0xFF	; 255
 656:	c9 f7       	brne	.-14     	; 0x64a <__divsf3_pse+0x78>
 658:	88 0f       	add	r24, r24
 65a:	91 1d       	adc	r25, r1
 65c:	96 95       	lsr	r25
 65e:	87 95       	ror	r24
 660:	97 f9       	bld	r25, 7
 662:	08 95       	ret
 664:	e1 e0       	ldi	r30, 0x01	; 1
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	88 1f       	adc	r24, r24
 66c:	bb 1f       	adc	r27, r27
 66e:	62 17       	cp	r22, r18
 670:	73 07       	cpc	r23, r19
 672:	84 07       	cpc	r24, r20
 674:	ba 07       	cpc	r27, r26
 676:	20 f0       	brcs	.+8      	; 0x680 <__divsf3_pse+0xae>
 678:	62 1b       	sub	r22, r18
 67a:	73 0b       	sbc	r23, r19
 67c:	84 0b       	sbc	r24, r20
 67e:	ba 0b       	sbc	r27, r26
 680:	ee 1f       	adc	r30, r30
 682:	88 f7       	brcc	.-30     	; 0x666 <__divsf3_pse+0x94>
 684:	e0 95       	com	r30
 686:	08 95       	ret

00000688 <__fixsfsi>:
 688:	0e 94 4b 03 	call	0x696	; 0x696 <__fixunssfsi>
 68c:	68 94       	set
 68e:	b1 11       	cpse	r27, r1
 690:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_szero>
 694:	08 95       	ret

00000696 <__fixunssfsi>:
 696:	0e 94 34 04 	call	0x868	; 0x868 <__fp_splitA>
 69a:	88 f0       	brcs	.+34     	; 0x6be <__fixunssfsi+0x28>
 69c:	9f 57       	subi	r25, 0x7F	; 127
 69e:	98 f0       	brcs	.+38     	; 0x6c6 <__fixunssfsi+0x30>
 6a0:	b9 2f       	mov	r27, r25
 6a2:	99 27       	eor	r25, r25
 6a4:	b7 51       	subi	r27, 0x17	; 23
 6a6:	b0 f0       	brcs	.+44     	; 0x6d4 <__fixunssfsi+0x3e>
 6a8:	e1 f0       	breq	.+56     	; 0x6e2 <__fixunssfsi+0x4c>
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	1a f0       	brmi	.+6      	; 0x6ba <__fixunssfsi+0x24>
 6b4:	ba 95       	dec	r27
 6b6:	c9 f7       	brne	.-14     	; 0x6aa <__fixunssfsi+0x14>
 6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <__fixunssfsi+0x4c>
 6ba:	b1 30       	cpi	r27, 0x01	; 1
 6bc:	91 f0       	breq	.+36     	; 0x6e2 <__fixunssfsi+0x4c>
 6be:	0e 94 66 04 	call	0x8cc	; 0x8cc <__fp_zero>
 6c2:	b1 e0       	ldi	r27, 0x01	; 1
 6c4:	08 95       	ret
 6c6:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_zero>
 6ca:	67 2f       	mov	r22, r23
 6cc:	78 2f       	mov	r23, r24
 6ce:	88 27       	eor	r24, r24
 6d0:	b8 5f       	subi	r27, 0xF8	; 248
 6d2:	39 f0       	breq	.+14     	; 0x6e2 <__fixunssfsi+0x4c>
 6d4:	b9 3f       	cpi	r27, 0xF9	; 249
 6d6:	cc f3       	brlt	.-14     	; 0x6ca <__fixunssfsi+0x34>
 6d8:	86 95       	lsr	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	b3 95       	inc	r27
 6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__fixunssfsi+0x42>
 6e2:	3e f4       	brtc	.+14     	; 0x6f2 <__fixunssfsi+0x5c>
 6e4:	90 95       	com	r25
 6e6:	80 95       	com	r24
 6e8:	70 95       	com	r23
 6ea:	61 95       	neg	r22
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__floatunsisf>:
 6f4:	e8 94       	clt
 6f6:	09 c0       	rjmp	.+18     	; 0x70a <__floatsisf+0x12>

000006f8 <__floatsisf>:
 6f8:	97 fb       	bst	r25, 7
 6fa:	3e f4       	brtc	.+14     	; 0x70a <__floatsisf+0x12>
 6fc:	90 95       	com	r25
 6fe:	80 95       	com	r24
 700:	70 95       	com	r23
 702:	61 95       	neg	r22
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	99 23       	and	r25, r25
 70c:	a9 f0       	breq	.+42     	; 0x738 <__floatsisf+0x40>
 70e:	f9 2f       	mov	r31, r25
 710:	96 e9       	ldi	r25, 0x96	; 150
 712:	bb 27       	eor	r27, r27
 714:	93 95       	inc	r25
 716:	f6 95       	lsr	r31
 718:	87 95       	ror	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f1 11       	cpse	r31, r1
 722:	f8 cf       	rjmp	.-16     	; 0x714 <__floatsisf+0x1c>
 724:	fa f4       	brpl	.+62     	; 0x764 <__floatsisf+0x6c>
 726:	bb 0f       	add	r27, r27
 728:	11 f4       	brne	.+4      	; 0x72e <__floatsisf+0x36>
 72a:	60 ff       	sbrs	r22, 0
 72c:	1b c0       	rjmp	.+54     	; 0x764 <__floatsisf+0x6c>
 72e:	6f 5f       	subi	r22, 0xFF	; 255
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	16 c0       	rjmp	.+44     	; 0x764 <__floatsisf+0x6c>
 738:	88 23       	and	r24, r24
 73a:	11 f0       	breq	.+4      	; 0x740 <__floatsisf+0x48>
 73c:	96 e9       	ldi	r25, 0x96	; 150
 73e:	11 c0       	rjmp	.+34     	; 0x762 <__floatsisf+0x6a>
 740:	77 23       	and	r23, r23
 742:	21 f0       	breq	.+8      	; 0x74c <__floatsisf+0x54>
 744:	9e e8       	ldi	r25, 0x8E	; 142
 746:	87 2f       	mov	r24, r23
 748:	76 2f       	mov	r23, r22
 74a:	05 c0       	rjmp	.+10     	; 0x756 <__floatsisf+0x5e>
 74c:	66 23       	and	r22, r22
 74e:	71 f0       	breq	.+28     	; 0x76c <__floatsisf+0x74>
 750:	96 e8       	ldi	r25, 0x86	; 134
 752:	86 2f       	mov	r24, r22
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	2a f0       	brmi	.+10     	; 0x764 <__floatsisf+0x6c>
 75a:	9a 95       	dec	r25
 75c:	66 0f       	add	r22, r22
 75e:	77 1f       	adc	r23, r23
 760:	88 1f       	adc	r24, r24
 762:	da f7       	brpl	.-10     	; 0x75a <__floatsisf+0x62>
 764:	88 0f       	add	r24, r24
 766:	96 95       	lsr	r25
 768:	87 95       	ror	r24
 76a:	97 f9       	bld	r25, 7
 76c:	08 95       	ret

0000076e <__fp_cmp>:
 76e:	99 0f       	add	r25, r25
 770:	00 08       	sbc	r0, r0
 772:	55 0f       	add	r21, r21
 774:	aa 0b       	sbc	r26, r26
 776:	e0 e8       	ldi	r30, 0x80	; 128
 778:	fe ef       	ldi	r31, 0xFE	; 254
 77a:	16 16       	cp	r1, r22
 77c:	17 06       	cpc	r1, r23
 77e:	e8 07       	cpc	r30, r24
 780:	f9 07       	cpc	r31, r25
 782:	c0 f0       	brcs	.+48     	; 0x7b4 <__fp_cmp+0x46>
 784:	12 16       	cp	r1, r18
 786:	13 06       	cpc	r1, r19
 788:	e4 07       	cpc	r30, r20
 78a:	f5 07       	cpc	r31, r21
 78c:	98 f0       	brcs	.+38     	; 0x7b4 <__fp_cmp+0x46>
 78e:	62 1b       	sub	r22, r18
 790:	73 0b       	sbc	r23, r19
 792:	84 0b       	sbc	r24, r20
 794:	95 0b       	sbc	r25, r21
 796:	39 f4       	brne	.+14     	; 0x7a6 <__fp_cmp+0x38>
 798:	0a 26       	eor	r0, r26
 79a:	61 f0       	breq	.+24     	; 0x7b4 <__fp_cmp+0x46>
 79c:	23 2b       	or	r18, r19
 79e:	24 2b       	or	r18, r20
 7a0:	25 2b       	or	r18, r21
 7a2:	21 f4       	brne	.+8      	; 0x7ac <__fp_cmp+0x3e>
 7a4:	08 95       	ret
 7a6:	0a 26       	eor	r0, r26
 7a8:	09 f4       	brne	.+2      	; 0x7ac <__fp_cmp+0x3e>
 7aa:	a1 40       	sbci	r26, 0x01	; 1
 7ac:	a6 95       	lsr	r26
 7ae:	8f ef       	ldi	r24, 0xFF	; 255
 7b0:	81 1d       	adc	r24, r1
 7b2:	81 1d       	adc	r24, r1
 7b4:	08 95       	ret

000007b6 <__fp_inf>:
 7b6:	97 f9       	bld	r25, 7
 7b8:	9f 67       	ori	r25, 0x7F	; 127
 7ba:	80 e8       	ldi	r24, 0x80	; 128
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	08 95       	ret

000007c2 <__fp_mintl>:
 7c2:	88 23       	and	r24, r24
 7c4:	71 f4       	brne	.+28     	; 0x7e2 <__fp_mintl+0x20>
 7c6:	77 23       	and	r23, r23
 7c8:	21 f0       	breq	.+8      	; 0x7d2 <__fp_mintl+0x10>
 7ca:	98 50       	subi	r25, 0x08	; 8
 7cc:	87 2b       	or	r24, r23
 7ce:	76 2f       	mov	r23, r22
 7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <__fp_mintl+0x1e>
 7d2:	66 23       	and	r22, r22
 7d4:	11 f4       	brne	.+4      	; 0x7da <__fp_mintl+0x18>
 7d6:	99 27       	eor	r25, r25
 7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <__fp_mintl+0x32>
 7da:	90 51       	subi	r25, 0x10	; 16
 7dc:	86 2b       	or	r24, r22
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	2a f0       	brmi	.+10     	; 0x7ee <__fp_mintl+0x2c>
 7e4:	9a 95       	dec	r25
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	da f7       	brpl	.-10     	; 0x7e4 <__fp_mintl+0x22>
 7ee:	88 0f       	add	r24, r24
 7f0:	96 95       	lsr	r25
 7f2:	87 95       	ror	r24
 7f4:	97 f9       	bld	r25, 7
 7f6:	08 95       	ret

000007f8 <__fp_mpack>:
 7f8:	9f 3f       	cpi	r25, 0xFF	; 255
 7fa:	31 f0       	breq	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>

000007fc <__fp_mpack_finite>:
 7fc:	91 50       	subi	r25, 0x01	; 1
 7fe:	20 f4       	brcc	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 800:	87 95       	ror	r24
 802:	77 95       	ror	r23
 804:	67 95       	ror	r22
 806:	b7 95       	ror	r27
 808:	88 0f       	add	r24, r24
 80a:	91 1d       	adc	r25, r1
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret

00000814 <__fp_nan>:
 814:	9f ef       	ldi	r25, 0xFF	; 255
 816:	80 ec       	ldi	r24, 0xC0	; 192
 818:	08 95       	ret

0000081a <__fp_pscA>:
 81a:	00 24       	eor	r0, r0
 81c:	0a 94       	dec	r0
 81e:	16 16       	cp	r1, r22
 820:	17 06       	cpc	r1, r23
 822:	18 06       	cpc	r1, r24
 824:	09 06       	cpc	r0, r25
 826:	08 95       	ret

00000828 <__fp_pscB>:
 828:	00 24       	eor	r0, r0
 82a:	0a 94       	dec	r0
 82c:	12 16       	cp	r1, r18
 82e:	13 06       	cpc	r1, r19
 830:	14 06       	cpc	r1, r20
 832:	05 06       	cpc	r0, r21
 834:	08 95       	ret

00000836 <__fp_round>:
 836:	09 2e       	mov	r0, r25
 838:	03 94       	inc	r0
 83a:	00 0c       	add	r0, r0
 83c:	11 f4       	brne	.+4      	; 0x842 <__fp_round+0xc>
 83e:	88 23       	and	r24, r24
 840:	52 f0       	brmi	.+20     	; 0x856 <__fp_round+0x20>
 842:	bb 0f       	add	r27, r27
 844:	40 f4       	brcc	.+16     	; 0x856 <__fp_round+0x20>
 846:	bf 2b       	or	r27, r31
 848:	11 f4       	brne	.+4      	; 0x84e <__fp_round+0x18>
 84a:	60 ff       	sbrs	r22, 0
 84c:	04 c0       	rjmp	.+8      	; 0x856 <__fp_round+0x20>
 84e:	6f 5f       	subi	r22, 0xFF	; 255
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	08 95       	ret

00000858 <__fp_split3>:
 858:	57 fd       	sbrc	r21, 7
 85a:	90 58       	subi	r25, 0x80	; 128
 85c:	44 0f       	add	r20, r20
 85e:	55 1f       	adc	r21, r21
 860:	59 f0       	breq	.+22     	; 0x878 <__fp_splitA+0x10>
 862:	5f 3f       	cpi	r21, 0xFF	; 255
 864:	71 f0       	breq	.+28     	; 0x882 <__fp_splitA+0x1a>
 866:	47 95       	ror	r20

00000868 <__fp_splitA>:
 868:	88 0f       	add	r24, r24
 86a:	97 fb       	bst	r25, 7
 86c:	99 1f       	adc	r25, r25
 86e:	61 f0       	breq	.+24     	; 0x888 <__fp_splitA+0x20>
 870:	9f 3f       	cpi	r25, 0xFF	; 255
 872:	79 f0       	breq	.+30     	; 0x892 <__fp_splitA+0x2a>
 874:	87 95       	ror	r24
 876:	08 95       	ret
 878:	12 16       	cp	r1, r18
 87a:	13 06       	cpc	r1, r19
 87c:	14 06       	cpc	r1, r20
 87e:	55 1f       	adc	r21, r21
 880:	f2 cf       	rjmp	.-28     	; 0x866 <__stack+0x7>
 882:	46 95       	lsr	r20
 884:	f1 df       	rcall	.-30     	; 0x868 <__fp_splitA>
 886:	08 c0       	rjmp	.+16     	; 0x898 <__fp_splitA+0x30>
 888:	16 16       	cp	r1, r22
 88a:	17 06       	cpc	r1, r23
 88c:	18 06       	cpc	r1, r24
 88e:	99 1f       	adc	r25, r25
 890:	f1 cf       	rjmp	.-30     	; 0x874 <__fp_splitA+0xc>
 892:	86 95       	lsr	r24
 894:	71 05       	cpc	r23, r1
 896:	61 05       	cpc	r22, r1
 898:	08 94       	sec
 89a:	08 95       	ret

0000089c <__fp_trunc>:
 89c:	0e 94 34 04 	call	0x868	; 0x868 <__fp_splitA>
 8a0:	a0 f0       	brcs	.+40     	; 0x8ca <__fp_trunc+0x2e>
 8a2:	be e7       	ldi	r27, 0x7E	; 126
 8a4:	b9 17       	cp	r27, r25
 8a6:	88 f4       	brcc	.+34     	; 0x8ca <__fp_trunc+0x2e>
 8a8:	bb 27       	eor	r27, r27
 8aa:	9f 38       	cpi	r25, 0x8F	; 143
 8ac:	60 f4       	brcc	.+24     	; 0x8c6 <__fp_trunc+0x2a>
 8ae:	16 16       	cp	r1, r22
 8b0:	b1 1d       	adc	r27, r1
 8b2:	67 2f       	mov	r22, r23
 8b4:	78 2f       	mov	r23, r24
 8b6:	88 27       	eor	r24, r24
 8b8:	98 5f       	subi	r25, 0xF8	; 248
 8ba:	f7 cf       	rjmp	.-18     	; 0x8aa <__fp_trunc+0xe>
 8bc:	86 95       	lsr	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b1 1d       	adc	r27, r1
 8c4:	93 95       	inc	r25
 8c6:	96 39       	cpi	r25, 0x96	; 150
 8c8:	c8 f3       	brcs	.-14     	; 0x8bc <__fp_trunc+0x20>
 8ca:	08 95       	ret

000008cc <__fp_zero>:
 8cc:	e8 94       	clt

000008ce <__fp_szero>:
 8ce:	bb 27       	eor	r27, r27
 8d0:	66 27       	eor	r22, r22
 8d2:	77 27       	eor	r23, r23
 8d4:	cb 01       	movw	r24, r22
 8d6:	97 f9       	bld	r25, 7
 8d8:	08 95       	ret

000008da <__gesf2>:
 8da:	0e 94 b7 03 	call	0x76e	; 0x76e <__fp_cmp>
 8de:	08 f4       	brcc	.+2      	; 0x8e2 <__gesf2+0x8>
 8e0:	8f ef       	ldi	r24, 0xFF	; 255
 8e2:	08 95       	ret

000008e4 <__mulsf3>:
 8e4:	0e 94 85 04 	call	0x90a	; 0x90a <__mulsf3x>
 8e8:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_round>
 8ec:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscA>
 8f0:	38 f0       	brcs	.+14     	; 0x900 <__mulsf3+0x1c>
 8f2:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscB>
 8f6:	20 f0       	brcs	.+8      	; 0x900 <__mulsf3+0x1c>
 8f8:	95 23       	and	r25, r21
 8fa:	11 f0       	breq	.+4      	; 0x900 <__mulsf3+0x1c>
 8fc:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_inf>
 900:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_nan>
 904:	11 24       	eor	r1, r1
 906:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_szero>

0000090a <__mulsf3x>:
 90a:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_split3>
 90e:	70 f3       	brcs	.-36     	; 0x8ec <__mulsf3+0x8>

00000910 <__mulsf3_pse>:
 910:	95 9f       	mul	r25, r21
 912:	c1 f3       	breq	.-16     	; 0x904 <__mulsf3+0x20>
 914:	95 0f       	add	r25, r21
 916:	50 e0       	ldi	r21, 0x00	; 0
 918:	55 1f       	adc	r21, r21
 91a:	62 9f       	mul	r22, r18
 91c:	f0 01       	movw	r30, r0
 91e:	72 9f       	mul	r23, r18
 920:	bb 27       	eor	r27, r27
 922:	f0 0d       	add	r31, r0
 924:	b1 1d       	adc	r27, r1
 926:	63 9f       	mul	r22, r19
 928:	aa 27       	eor	r26, r26
 92a:	f0 0d       	add	r31, r0
 92c:	b1 1d       	adc	r27, r1
 92e:	aa 1f       	adc	r26, r26
 930:	64 9f       	mul	r22, r20
 932:	66 27       	eor	r22, r22
 934:	b0 0d       	add	r27, r0
 936:	a1 1d       	adc	r26, r1
 938:	66 1f       	adc	r22, r22
 93a:	82 9f       	mul	r24, r18
 93c:	22 27       	eor	r18, r18
 93e:	b0 0d       	add	r27, r0
 940:	a1 1d       	adc	r26, r1
 942:	62 1f       	adc	r22, r18
 944:	73 9f       	mul	r23, r19
 946:	b0 0d       	add	r27, r0
 948:	a1 1d       	adc	r26, r1
 94a:	62 1f       	adc	r22, r18
 94c:	83 9f       	mul	r24, r19
 94e:	a0 0d       	add	r26, r0
 950:	61 1d       	adc	r22, r1
 952:	22 1f       	adc	r18, r18
 954:	74 9f       	mul	r23, r20
 956:	33 27       	eor	r19, r19
 958:	a0 0d       	add	r26, r0
 95a:	61 1d       	adc	r22, r1
 95c:	23 1f       	adc	r18, r19
 95e:	84 9f       	mul	r24, r20
 960:	60 0d       	add	r22, r0
 962:	21 1d       	adc	r18, r1
 964:	82 2f       	mov	r24, r18
 966:	76 2f       	mov	r23, r22
 968:	6a 2f       	mov	r22, r26
 96a:	11 24       	eor	r1, r1
 96c:	9f 57       	subi	r25, 0x7F	; 127
 96e:	50 40       	sbci	r21, 0x00	; 0
 970:	9a f0       	brmi	.+38     	; 0x998 <__mulsf3_pse+0x88>
 972:	f1 f0       	breq	.+60     	; 0x9b0 <__mulsf3_pse+0xa0>
 974:	88 23       	and	r24, r24
 976:	4a f0       	brmi	.+18     	; 0x98a <__mulsf3_pse+0x7a>
 978:	ee 0f       	add	r30, r30
 97a:	ff 1f       	adc	r31, r31
 97c:	bb 1f       	adc	r27, r27
 97e:	66 1f       	adc	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	91 50       	subi	r25, 0x01	; 1
 986:	50 40       	sbci	r21, 0x00	; 0
 988:	a9 f7       	brne	.-22     	; 0x974 <__mulsf3_pse+0x64>
 98a:	9e 3f       	cpi	r25, 0xFE	; 254
 98c:	51 05       	cpc	r21, r1
 98e:	80 f0       	brcs	.+32     	; 0x9b0 <__mulsf3_pse+0xa0>
 990:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_inf>
 994:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_szero>
 998:	5f 3f       	cpi	r21, 0xFF	; 255
 99a:	e4 f3       	brlt	.-8      	; 0x994 <__mulsf3_pse+0x84>
 99c:	98 3e       	cpi	r25, 0xE8	; 232
 99e:	d4 f3       	brlt	.-12     	; 0x994 <__mulsf3_pse+0x84>
 9a0:	86 95       	lsr	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	b7 95       	ror	r27
 9a8:	f7 95       	ror	r31
 9aa:	e7 95       	ror	r30
 9ac:	9f 5f       	subi	r25, 0xFF	; 255
 9ae:	c1 f7       	brne	.-16     	; 0x9a0 <__mulsf3_pse+0x90>
 9b0:	fe 2b       	or	r31, r30
 9b2:	88 0f       	add	r24, r24
 9b4:	91 1d       	adc	r25, r1
 9b6:	96 95       	lsr	r25
 9b8:	87 95       	ror	r24
 9ba:	97 f9       	bld	r25, 7
 9bc:	08 95       	ret

000009be <_exit>:
 9be:	f8 94       	cli

000009c0 <__stop_program>:
 9c0:	ff cf       	rjmp	.-2      	; 0x9c0 <__stop_program>
